<?xml version="1.0" encoding="ISO-8859-1" ?>

<project name="startup-obcs" default="startup-obcs">

  <!-- Properties File Name -->
  <property name="file.local.machine.properties" value="local-machine.properties" />
  <property name="fs" value="${file.separator}" />

  <!-- Check and Load properties file -->
  <target name="check-local-machine-properties"
          unless="flag.local.machine.properties.file.exists"
          depends="check-properties-file-exists">
    <ant antfile="aua-check-properties.xml"/>
  </target>

  <target name="check-properties-file-exists">
    <available file="${file.local.machine.properties}" type="file" property="flag.local.machine.properties.file.exists" />
  </target>

  <target name="startup-obcs" depends="check-local-machine-properties">
    <dirname property="dir.antfile" file="${ant.file}"/>
    <loadproperties srcFile="${dir.antfile}${fs}${file.local.machine.properties}"/>
    <antcall target="run-obcs-windows"   inheritAll="true" />
    <antcall target="run-obcs-mac"       inheritAll="true" />
    <antcall target="run-obcs-unix-like" inheritAll="true" />
    <antcall target="run-obcs-netware"   inheritAll="true" />
  </target>

  <!-- Platform dependant sub-procedures -->
  <target name="get-obcs-service-name">
    <xmlproperty file="${aua.file.work.config}"/>
    <condition property="aua.win.service.name.old.scheduler" value="OnlineBackupScheduler" else="AClickBackupScheduler">
      <equals arg1="${auotupdate.product.name}" arg2="obm"/>
    </condition>
    <condition property="aua.win.service.name.new.scheduler" value="OBScheduler" else="OBAScheduler">
      <equals arg1="${auotupdate.product.name}" arg2="obm"/>
    </condition>
  </target>

  <target name="check-observices-properites-file-exist">
    <condition property="flag.is.observices.properties.file.exist">
      <available file="${aua.file.work.ipc.services.observices.properties}" />
    </condition>
  </target>

  <target name="load-observices-properties" depends="check-observices-properites-file-exist" if="flag.is.observices.properties.file.exist">
    <loadproperties srcfile="${aua.file.work.ipc.services.observices.properties}" />
  </target>

  <target name="check-observices-properties-exist" depends="load-observices-properties">
    <condition property="flag.is.observice.scheduler.old.service.status.set" >
      <isset property="observice.scheduler.old.service.status" />
    </condition>
    <condition property="flag.is.observice.scheduler.old.service.cmd.return.value.set" >
      <isset property="observice.scheduler.old.service.cmd.return.value" />
    </condition>
    <condition property="flag.is.observice.scheduler.new.service.status.set" >
      <isset property="observice.scheduler.new.service.status" />
    </condition>
    <condition property="flag.is.observice.scheduler.new.service.cmd.return.value.set" >
      <isset property="observice.scheduler.new.service.cmd.return.value" />
    </condition>
  </target>

  <target name="set-obcs-service-status" depends="check-observices-properties-exist">
    <ant antfile="service-status-tools.xml" target="set-service-status" inheritall="true">
      <property name="param.observice.name" value="${aua.win.service.name.old.scheduler}" />
      <property name="param.observice.status" value="${observice.scheduler.old.service.status}" />
      <property name="param.observice.return.value" value="${observice.scheduler.old.service.cmd.return.value}" />
      <property name="param.flag.is.observice.service.status.set" value="${flag.is.observice.scheduler.old.service.status.set}"/>
      <property name="param.flag.is.observice.service.cmd.return.value.set" value="${flag.is.observice.scheduler.old.service.cmd.return.value.set}" />
    </ant>
    <ant antfile="service-status-tools.xml" target="set-service-status" inheritall="true">
      <property name="param.observice.name" value="${aua.win.service.name.new.scheduler}" />
      <property name="param.observice.status" value="${observice.scheduler.new.service.status}" />
      <property name="param.observice.return.value" value="${observice.scheduler.new.service.cmd.return.value}" />
      <property name="param.flag.is.observice.service.status.set" value="${flag.is.observice.scheduler.new.service.status.set}"/>
      <property name="param.flag.is.observice.service.cmd.return.value.set" value="${flag.is.observice.scheduler.new.service.cmd.return.value.set}" />
    </ant>
  </target>

  <target name="check-is-old-obcs-process-already-set">
    <condition property="flag.is.old.obcs.process.already.set">
      <or>
        <istrue value="${flag.is.observice.scheduler.old.service.status.set}" />
        <istrue value="${flag.is.observice.scheduler.old.service.cmd.return.value.set}" />
      </or>
    </condition>
  </target>

  <target name="check-is-new-obcs-process-already-set">
    <condition property="flag.is.new.obcs.process.already.set">
      <or>
        <istrue value="${flag.is.observice.scheduler.new.service.status.set}" />
        <istrue value="${flag.is.observice.scheduler.new.service.cmd.return.value.set}" />
      </or>
    </condition>
  </target>

  <target name="service-start-old-obcs-process" depends="check-is-old-obcs-process-already-set" unless="flag.is.old.obcs.process.already.set">
    <exec executable="${executable.win.net.command}" spawn="true">
      <arg line="start ${aua.win.service.name.old.scheduler}" />
    </exec>
  </target>

  <target name="service-start-new-obcs-process" depends="check-is-new-obcs-process-already-set" unless="flag.is.new.obcs.process.already.set">
    <exec executable="${executable.win.net.command}" spawn="true">
      <arg line="start ${aua.win.service.name.new.scheduler}" />
    </exec>
  </target>

  <target name="service-start-obcs-process" depends="check-observices-properties-exist" >
    <property name="executable.win.net.command" value="net.exe" />
    <antcall target="service-start-old-obcs-process" inheritall="true" />
    <antcall target="service-start-new-obcs-process" inheritall="true" />
  </target>

  <!-- Main Targets -->

  <target name="run-obcs-windows" depends="get-obcs-service-name" if="aua.os.family.is.windows">
    <echo message="Start to set the service of the Scheduler... "/>
    <antcall inheritall="true" target="set-obcs-service-status" />
    <echo message="Startup Scheduler service ..." />
    <antcall inheritall="true" target="service-start-obcs-process"/>
  </target>

  <target name="run-obcs-mac" if="aua.os.family.is.mac">
    <exec executable="${aua.dir.home.bin}${fs}Scheduler.sh" spawn="true" dir="${aua.dir.home.bin}" />
  </target>

  <target name="run-obcs-unix-like" if="aua.os.family.is.unix-like">
    <exec executable="${aua.dir.home.bin}${fs}Scheduler.sh" spawn="true" dir="${aua.dir.home.bin}" />
  </target>

  <target name="run-obcs-netware" if="aua.os.family.is.netware">
    <exec executable="${aua.dir.home.bin}${fs}Scheduler.ncf" spawn="true" dir="${aua.dir.home.bin}" />
  </target>

</project>
