<?xml version="1.0" encoding="ISO-8859-1" ?>

<project name="aua-core-install" default="install">

  <!-- All parameters passed from AutoUpdataAgent -->
  <property name="file.local.machine.properties" value="local-machine.properties" />
  <property name="fs" value="${file.separator}" />

  <target name="check-is-os-mac">
    <condition property="flag.is.os.mac">
      <os family="mac"/>
    </condition>
  </target>

  <target name="install" depends="check-is-os-mac">

    <property name="dir.new.upgrade" value="${dir.new}${fs}${dir.upgrade}" />
    <property name="dir.old.downgrade" value="${dir.old}${fs}${dir.downgrade}" />

    <!-- 2012-09-13 : added configuration backup and migration logic -->
    <antcall inheritall="true" target="app-configuration-file-backup"/>
    <antcall inheritall="true" target="execute-configuration-backup"/>

    <antcall inheritall="true" target="non-mac-install"/>
    <antcall inheritall="true" target="mac-install"/>
    <antcall inheritall="true" target="post-installation-configuration"/>

    <!-- 2012-09-13 : added configuration backup and migration logic -->
    <antcall inheritall="true" target="execute-configuration-migrate"/>
  </target>

  <target name="non-mac-install" unless="flag.is.os.mac">
    <mkdir dir="${dir.cache}" />
    <move todir="${dir.cache}" preservelastmodified="true">
      <fileset dir="${dir.current}">
        <present present="both" targetdir="${dir.new.upgrade}" />
      </fileset>
    </move>
    <copy todir="${dir.current}" preservelastmodified="true">
      <fileset dir="${dir.new.upgrade}">
        <include name="**/*" />
        <include name="**/*.*" />
      </fileset>
    </copy>
    <delete dir="${dir.cache}"/>
    <delete dir="${dir.new}" />

  </target>

  <target name="mac-install" if="flag.is.os.mac">
    <mkdir dir="${dir.cache}" />
    <move todir="${dir.cache}" preservelastmodified="true">
      <fileset dir="${dir.current}" followsymlinks="false">
        <present present="both" targetdir="${dir.new.upgrade}" />
      </fileset>
    </move>
    <copy todir="${dir.current}" preservelastmodified="true">
      <fileset dir="${dir.new.upgrade}" followsymlinks="false">
        <include name="**/*" />
        <include name="**/*.*" />
      </fileset>
    </copy>
    <delete dir="${dir.cache}"/>
    <delete dir="${dir.new}" />
  </target>

  <target name="post-installation-configuration">
    <dirname property="dir.antfile" file="${ant.file}"/>
    <loadproperties srcFile="${dir.antfile}${fs}${file.local.machine.properties}"/>
    <antcall inheritall="true" target="post-install" />
    <antcall inheritall="true" target="chmod-for-shell-scripts" />
    <antcall inheritall="true" target="update-mac-backup-manager-info-plist" />
    <antcall inheritall="true" target="execute-runtime-configuration"/>
    <antcall inheritall="true" target="run-unix-like-runtime-config"/>
    <antcall inheritall="true" target="check-and-run-upgrade-config-file"/>
  </target>
  <target name="check-post-install-script-existence">
    <property name="file.update.post.install.app.bat" value="${aua.dir.home}${fs}post-install-app.bat"/>
    <property name="file.update.post.install.app.sh"  value="${aua.dir.home}${fs}post-install-app.sh"/>
    <condition property="flag.is.post.install.script.exist">
      <or>
        <available file="${file.update.post.install.app.bat}"/>
        <available file="${file.update.post.install.app.sh}"/>
      </or>
    </condition>
  </target>

  <target name="post-install" depends="check-post-install-script-existence" if="flag.is.post.install.script.exist">
    <antcall target="win-post-install" inheritall="true"/>
    <antcall target="mac-post-install" inheritall="true"/>
    <antcall target="nix-post-install" inheritall="true"/>
  </target>

  <target name="win-post-install" if="aua.os.family.is.windows">
    <exec executable="cmd" failonerror="false">
      <arg value="/c"/>
      <arg value="${file.update.post.install.app.bat}"/>
    </exec>
  </target>

  <target name="mac-post-install" if="aua.os.family.is.mac">
    <chmod perm="ugo+rx" file="${file.update.post.install.app.sh}"/>
    <exec executable="${file.update.post.install.app.sh}" failonerror="false"/>
  </target>

  <target name="nix-post-install" if="aua.os.family.is.unix-like">
    <chmod perm="ugo+rx" file="${file.update.post.install.app.sh}"/>
    <exec executable="${file.update.post.install.app.sh}" failonerror="false"/>
  </target>

  <target name="chmod-for-shell-scripts" if="flag.os.use.shell" depends="check-os-use-shell">
    <antcall target="non-mac-chmod-for-shell-scripts" inheritall="true"/>
    <antcall target="mac-chmod-for-shell-scripts" inheritall="true"/>
  </target>

  <target name="check-os-use-shell">
    <condition property="flag.os.use.shell">
      <or>
        <os family="unix"/>
        <os family="mac"/>
        <os family="tandem"/>
      </or>
    </condition>
  </target>

  <target name="non-mac-chmod-for-shell-scripts" unless="flag.is.os.mac">
    <chmod perm="ugo+rx" type="file">
      <fileset dir="${dir.current}">
        <include name="**/*.sh"/>
      </fileset>
    </chmod>
  </target>

  <target name="mac-chmod-for-shell-scripts" if="flag.is.os.mac">
    <chmod perm="ugo+rx" type="file">
      <fileset dir="${dir.current}" followsymlinks="false">
        <include name="**/*.sh"/>
        <include name="**/*.app/**"/>
      </fileset>
    </chmod>
  </target>

  <target name="update-mac-backup-manager-info-plist" if="flag.os.use.app" depends="check-os-use-app">
    <dirname property="dir.product.home" file="${basedir}"/>
    <replace file="${dir.product.home}/BackupManager.app/Contents/Info.plist">
      <replacefilter token="${dir.old}" value="${dir.new}"/>
    </replace>
  </target>

  <target name="check-os-use-app">
    <condition property="flag.os.use.app">
      <istrue value="${flag.is.os.mac}"/>
    </condition>
  </target>

  <!-- Check upgrade config file exist -->
  <target name="check-and-run-upgrade-config-file">
    <available type="file" file="${aua.dir.home.bin}${fs}config.bat" property="flag.upgrade.config.bat.file.exists" />
    <available type="file" file="${aua.dir.home.bin}${fs}config.sh"  property="flag.upgrade.config.sh.file.exists" />
    <available type="file" file="${aua.dir.home.bin}${fs}config.ncf" property="flag.upgrade.config.ncf.file.exists" />
    <condition property="flag.run.upgrade.config.bat.file">
      <and>
        <isset property="aua.os.family.is.windows"/>
        <isset property="flag.upgrade.config.bat.file.exists"/>
      </and>
    </condition>
    <condition property="flag.run.upgrade.config.sh.file">
      <and>
        <isset property="aua.os.family.is.unix-like"/>
        <isset property="flag.upgrade.config.sh.file.exists"/>
      </and>
    </condition>
    <condition property="flag.run.upgrade.config.ncf.file">
      <and>
        <isset property="aua.os.family.is.netware"/>
        <isset property="flag.upgrade.config.ncf.file.exists"/>
      </and>
    </condition>
    <antcall inheritall="true" target="run-upgrade-config-with-config-bat"/>
    <antcall inheritall="true" target="run-upgrade-config-with-config-sh"/>
    <antcall inheritall="true" target="run-upgrade-config-with-config-ncf"/>
  </target>

  <target name="run-upgrade-config-with-config-bat" if="flag.run.upgrade.config.bat.file">
    <exec executable="${aua.dir.home.bin}${fs}config.bat" spawn="false" dir="${aua.dir.home.bin}" />
  </target>

  <target name="run-upgrade-config-with-config-sh" if="flag.run.upgrade.config.sh.file">
    <exec executable="sh" spawn="false" dir="${aua.dir.home.bin}">
      <arg line='"${aua.dir.home.bin}${fs}config.sh"'/>
    </exec>
  </target>

  <target name="run-upgrade-config-with-config-ncf" if="flag.run.upgrade.config.ncf.file">
    <exec executable="${aua.dir.home.bin}${fs}config.ncf" spawn="false" dir="${aua.dir.home.bin}" />
  </target>

  <target name="run-unix-like-runtime-config" if="aua.os.family.is.unix-like">
    <copy failonerror="false" file="${aua.dir.home.jvm}${fs}bin${fs}java" tofile="${aua.dir.home.jvm}${fs}bin${fs}ObmJW"/>
    <copy failonerror="false" file="${aua.dir.home.jvm}${fs}bin${fs}java" tofile="${aua.dir.home.jvm}${fs}bin${fs}SchedulerOBM"/>
    <copy failonerror="false" file="${aua.dir.work.jvm}${fs}bin${fs}java" tofile="${aua.dir.work.jvm}${fs}bin${fs}AuaObmJW"/>
    <copy failonerror="false" file="${aua.dir.home.jvm}${fs}bin${fs}java" tofile="${aua.dir.home.jvm}${fs}bin${fs}bJW"/>
    <copy failonerror="false" file="${aua.dir.home.jvm}${fs}bin${fs}java" tofile="${aua.dir.home.jvm}${fs}bin${fs}bschJW"/>
    <copy failonerror="false" file="${aua.dir.work.jvm}${fs}bin${fs}java" tofile="${aua.dir.work.jvm}${fs}bin${fs}AuaJW"/>
  </target>


  <target name="execute-runtime-configuration" depends="check-exist-runtime-configuration" if="flag.file.app.deployment.runtime.is.available">
    <ant inheritall="false" antfile="${filepath.app.deployment.runtime}" target="prepare-deployment-runtime"/>
  </target>

  <target name="check-exist-runtime-configuration">
    <dirname property="dirpath.aua.builds"        file="${ant.file}"/>
    <dirname property="dirpath.aua.home"          file="${dirpath.aua.builds}"/>
    <dirname property="dirpath.app.home"          file="${dirpath.aua.home}"/>

    <property name="dirpath.app.util"             value="${dirpath.app.home}${fs}util"/>
    <property name="dirpath.app.util.builds"      value="${dirpath.app.util}${fs}builds"/>

    <property name="filepath.app.deployment.runtime" value="${dirpath.app.util.builds}${fs}deployment.xml"/>

    <available type="file" file="${filepath.app.deployment.runtime}" property="flag.file.app.deployment.runtime.is.available"/>
  </target>

  <!-- 2012-09-13 : added configuration backup and migration logic -->
  <target name="app-configuration-file-backup">
    <dirname property="dirpath.aua.builds"        file="${ant.file}"/>
    <dirname property="dirpath.aua.home"          file="${dirpath.aua.builds}"/>
    <dirname property="dirpath.app.home"          file="${dirpath.aua.home}"/>
    <property name="dirpath.app.migration"       value="${dirpath.app.home}${fs}migration"/>

    <mkdir dir="${dirpath.app.migration}"/>
    <copy todir="${dirpath.app.migration}" preservelastmodified="true">
      <fileset dir="${dirpath.app.home}">
        <include name="*.opt" />
        <include name="*.ini" />
        <include name="*.xml" />
        <include name="*.txt" />
      </fileset>
    </copy>

  </target>

  <target name="execute-configuration-backup"
       depends="check-exist-migrate-configuration"
            if="flag.file.app.deployment.migrate.is.available">
    <ant inheritall="false" antfile="${filepath.app.deployment.migrate}" target="configuration-backup"/>
  </target>

  <target name="execute-configuration-migrate"
       depends="check-exist-migrate-configuration"
            if="flag.file.app.deployment.migrate.is.available">
    <ant inheritall="false" antfile="${filepath.app.deployment.migrate}" target="configuration-migrate"/>
  </target>

  <target name="check-exist-migrate-configuration">
    <dirname property="dirpath.aua.builds"        file="${ant.file}"/>
    <dirname property="dirpath.aua.home"          file="${dirpath.aua.builds}"/>
    <dirname property="dirpath.app.home"          file="${dirpath.aua.home}"/>

    <property name="dirpath.app.util"             value="${dirpath.app.home}${fs}util"/>
    <property name="dirpath.app.util.builds"      value="${dirpath.app.util}${fs}builds"/>

    <property name="filepath.app.deployment.migrate" value="${dirpath.app.util.builds}${fs}migrate-config.xml"/>

    <available type="file"
               file="${filepath.app.deployment.migrate}"
           property="flag.file.app.deployment.migrate.is.available"/>
  </target>


</project>
